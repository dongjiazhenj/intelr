TITLE
=====
XOM-switch: Hide Your Code From Advanced Code Reuse Attacks in One Shot!
------------------------------------------------------------------------

Track
=====
Platform Security, Applied Security
-----------------------------------

Abstract
========
Code disclosure guided ROP such as Just-in-time (JIT) ROP [3] and Hacking Blind
[5] is popular because of its convenience and robust on the changes of binary
layout. Its increasing popularity leads to several lines of research on defense
side. Among them, eXecutable-Only Memory (XOM) is one of the most sought-after
feature, since code read capability is eliminated. XOM could be achieved
efficiently in different ways with hardware assist, such as using CPUs that
have single layer split-cache (ITLB and DTLB) architecture; using CPUs with
Extended Page Table (EPT).  However, neither of the techniques are easily
deployable for end users since they have limited control over the target
systems. For instance, although modern CPU models still have split-cache
architecture, it has been added with an extra layer of unified TLB. Thus, OS
will not get information of ITLB miss or DTLB miss.  Without that, it is
impossible to know whether a page fault is due to code read or instruction
fetch. On the other hand, since EPT is managed by hypervisor, it may not be
accessible or controllable by end users, especially in cloud. Thus, it is
unlikely that end users could use EPT to enforce XOM. By contrast, Memory
Protection Keys for Userspace (PKU) is a user-level feature that allow
executable pages to be inaccessible from data accesses but without prevention
of its execution. PKU has been enabled since Linux kernel 4.9 with the support
of XOM. However, there is no end-to-end enabling for applications due the
absence of runtime support.


In this talk, we present XOM-switch, a security tool that allows end users to
enable XOM on their deployed Linux applications using PKU, a CPU feature that
will be widely available in PC market. In our approach, we provide an
end-to-end enabling for applications in Linux without no source code or
heavyweight binary rewriting. We will present the the entire pipeline of XOM
enabling process in details with all secret sauces to overcome challenges in
ELF binaries.

XOM-switch will be demonstrated, showing that it works on real world, large and
complex programs (executables and all dependent libraries) correctly with
almost no performance overhead. XOM-switch will be released with every tool
that we have built, including the original source code and the related test
data to enable researchers to replicate the research and to help developers
quickly turn on these features without refactoring their code.



Presentation Outline
====================

Problem Statement
-----------------
In this section, we introduce the purpose of our research briefly.

Goal: Given any executable or library loaded at runtime, XOM-switch will make
sure that its executable instructions "invisible" by marking code pages as
executable only (PROT_EXEC), while the whole program should work correctly.
XOM-switch relies on lightweight binary instrumentation.

Our approach does not modify the binary of application code nor the majority
of glibc. The only code we need to modify is the dynamic linker (ld.so). But
again, no source code of ld.so is required.

XOM-switch components
---------------------
In this section, we give an overview of our XOM-switch system. Through analysis
of ELF binary structure and the code loading procedure, we ensure that code
sections are marked as executable only, while metadata and read only data are
marked as read only.

These are the brief list of our XOM-switch components:

1) Dynamic linker modifier: a smart binary analysis tool to identify where to
patch ld.so.

2) Dynamic linker patcher: a smart binary instrumentation tool to patch extra
code logic into ld.so without source code, relocation or debugging info.

4) XOM loading: This is the code component that will be patched into ld.so. It
contains both C code and assembly code that would be injected into ld.so and
make sure an unmodified binary could be loaded with XOM.

5) Exception hanlding: handling embedded data in the middle of code, in case if
there is one

Background: Linux Kernel Support and The Undocumented ELF loader
----------------------------------------------------------------
PKU is enable by Linux kernel with 40+ patches. In addition, PKU is also
supported in cloud systems through KVM. In this section, we will briefly talks
about the support of Linux kernel for PKU such as three additional system calls
and the mechanism of XOM enabling through mmap(2), mprotect(2) and etc.

Another part of the background is the internals of ELF loader or dynamic linker
aka. ld.so.  Dynamic linker is one part of the glibc library group. We will
show its complex dependency relationship with libc.so, libpthread.so and
others.


Binary Instrumentation onf ELF loader
-------------------------------------
XOM-switch relies on a one-shot instrumentation of ld.so. However ld.so cannot
be simply replaced with another one from a difference source (even if they are
in the same version) due to its close dependency with several other glibc
libraries such as libc.so.6, libpthread.so.2 and etc (doing this will crash a
program at some point). Therefore, we choose to instrument ld.so through binary
instead of using a customized ld.so compiled from source code.

Our binary instrumentor supports injecting both C code and assembly code into
an existing ELF executable/library without affecting its original
functionality. In addition, our binary analyzer could allow you to choose where
to patch the binary smartly even if you don't know the address.

XOM Loading
-----------
As it is known, existing code loading is pretty coarse grained in the sense
that code segment contains metadata and read-only data before and after code
sections (the real code).  XOM loading code is the component injected into
existing ld.so. To enable XOM loading, we need to identify the real code
boundaries and load the metadata, code and read-only data separately with
different permissions. However, it is challenging to achieve this without
corrupting the ELF in memory. We will demonstrate our work in detail.


POC: Defeating JIT-ROP on Large Applications
--------------------------------------------
In this section, we give a real example of XOM-switch that can be applied on
browsers. In particular, we show that we could apply PKU enabled XOM to large
librareis such as libxul.so (the main library in Firefox).


PKU Gadget Analysis
-------------------
As it is known from Intel software manual, PKU based XOM could be changed by
user level instructions. A potential attack is to reuse "PKU gadgets", snippets
of code that contains an PKU write instruction (WRPKRU) and ending with an
indirect control transfer.

To cope with this limitation, we strictly disable the executable permission of
metadata and read-only data so that gadgets residing in these areas are
disabled. This signficantly reduces the sources where PKU gadget may live in.
In addition, we did thorough analysis on pages with code/data mixture,
especially two locations in each ELF: the 1st code page and the last one, since
those two pages are the usual location where code and data are mixed and thus
have to be both readable and executable. Note that any usage of the remaining
gadgets should be effectively mitigated if CET [4] is enabled in CPU.


XOM Reset on Critical Operations!
--------------------------------
While PKU gadget searching gives a positive feedback, the existence of PKU
gadgets is unavoidable due to the dependency of binary layout of victim
executables. Any PKU gadget left in readable pages and/or those correctly
guessed by attackers could lead to bypasses. In particular, a convenient attack
is the I/O related system call, as mentioned in BROP [5]. In the presence of
PKU, the only additional job for attacker is to guess the location of the PKU
gadget.

To cope with that, we use "XOM reset" to effectively mitigate any PKU bypass.
In particular, we achieve that by using WRPKRU on each I/O related system
calls.  We add such a WRPKRU instruction in kernel just before the code of
the system calls. By doing so, since code pages are "reset" to be non-readable, 
code page read operations would fail in kernel, thus avoid code leakage.

In addition to that, we strengthen the XOM reset by extending that to other
critical opeartions such as memcpy(3). This prevents the more complicated
scenarios, where attackers could first leak code pages by copying code to data
buffer before sending it out to network.

Our Observations
----------------
In this section, we disclose the details of our findings on our experiments:

0) Both the kernel and user level loader respect code loading with PROT_EXEC
only permission, when PKU features is enabled in Linux.

1) We show that with our strong memory protection, readable ROP gadgets are
reduced in several orders of magnitudes and PKU gadget left in the "gray"
areas, code pages containning data, is extremely rare.

2) We show that XOM-siwtch is effective against both JIT-ROP type of attacks
(in browser) and hacking blind type of attacks (in server applications).

3) We show that Linux ELF binaries on x86 has a relatively cleaner code
boundaries than ELF on ARMs and PE in Windows, i.e., less data embedded in the
middle of code.

4) We point out our MPK enabling with the help of XOM reset would pose a very
high bar to attackers.


Evaluation
----------
We conduct extensive evaluation of XOM-switch in various environments:
- Tested under Ubuntu 17.04 with Skylake CPU with PKU turn on
- Tested several real world popular applications such as browers.

In this section, we step through each experiment:
1) We measure the overhead of binary loading by monitoring the startup overhead.
2) We measure the effectiveness of PKU enabled XOM using CVE attacks.
3) We measure the potential weaknesses by scanning frequency of PKU gagets.

Demo
----
We show live demo of XOM-switch that can show the working applications with XOM.
The demo shows that our system is reliable, fast, and can be used for complex
applications. The demo highlights how XOM-switch can be applied quickly on
applications in docker containers.

Attendee Takeaways
==================
1) We are providing an open-source toolbox which hardens application code
against JIT-ROP and potentially any code leakage based attacks without harming
the program's original functionality.

2) We are proposing a one-shot binary rewriting to demonstrate the easy
enabling of XOM.

3) We are showing the real example of defense against JIT-ROP attackers.

Takeaway in short: XOM-switch's techniques can apply to any application
immediately without source code.

What's New?
===========
Our new contributions are listed below:

1) To the best of our knowledge, we are the first research work that enables
PKU-based XOM in x86 platforms. This goes beyond previous work such as Gionta
[1] and Backes et al [2] which relies on other CPU features such as split-cache
and EPTs respectively.

2) We choose a one-place security property injecting without relying on source
code or heavyweight rewriting, making the work more practical, efficient and
convenient.

3) We fully open our research infrastructure. Our XOM-switch could be easily
available for reseachers to reproduce our result and help app developers to
harden their applications and protect our end users from cyber attacks.

References
==========
[1] HideM: Protecting the Contents of Userspace Memory in the Face of
Disclosure Vulnerabilities, Jason Gionta et al., CODASPY, 2015 

[2] You Can Run but You Can't Read: Preventing Disclosure Exploits in
Executable Code, Michael Backes et. al., ACM CCS, 2014

[3] Just-In-Time Code Reuse:On the Effectiveness of Fine-Grained Address Space
Layout Randomization, Snow et al, S&P (Oakland), 2013

[4] Control-flow Enforcement Technology Preview, 2017
https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf

[5] Hacking Blind, Andrea Bittau, et. al., S&P (Oakland), 2014



Why Black Hat?
==============
1) To the best of our knowledge, the presented tool is the fist to enable the
new CPU feature PKU for the end-to-end usage of XOM on existing binaries. 

2) Our presentation informs the information security community about the
potential strength of defense on XOM, if it could be enabled in large scale.

3) Our XOM-switch, which will be available as open-source, will facilitate
further the security research binary analysis.


Clarification
=============
1) This is a pure research project done independently by Intel Labs.

2) The usage of PKU does not represent Intel's official oppinion on how PKU
should be used.

3) We will share what we have mentioned (code and talk) in the description, if
talk is accepted.
